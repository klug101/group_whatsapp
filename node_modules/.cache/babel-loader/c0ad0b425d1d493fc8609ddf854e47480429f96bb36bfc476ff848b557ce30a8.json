{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\otp\\\\Chat-WhatsApp-Group-main\\\\Chat-WhatsApp-Group-main\\\\Group\\\\src\\\\Components\\\\Timer\\\\Timer.js\",\n  _s = $RefreshSig$();\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../Context/SettingsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\nfunction Timer() {\n  _s();\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused] = useState(false);\n  const [mode, setMode] = useState('work');\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : \"\") * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : \"\";\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds,\n      styles: buildStyles({\n        textColor: '#3A3939',\n        pathColor: mode === 'work' ? green : red,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"oiHjkdLrbR12TglblXYclG7+zmQ=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","useContext","useState","useEffect","useRef","SettingsContext","jsxDEV","_jsxDEV","red","green","Timer","_s","settingsInfo","isPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","children","value","text","styles","textColor","pathColor","tailColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/otp/Chat-WhatsApp-Group-main/Chat-WhatsApp-Group-main/Group/src/Components/Timer/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport SettingsContext from \"../Context/SettingsContext\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n\n  const [isPaused] = useState(false);\n  const [mode, setMode] = useState('work'); \n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : \"\") * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : \"\";\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#3A3939',\n        pathColor:mode === 'work' ? green : red,\n        tailColor:'rgba(255,255,255,.2)',\n      })} />\n    </div>\n  );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}